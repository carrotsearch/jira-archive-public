Index: src/test/com/carrotsearch/hppc/ObjectArrayListTest.java
===================================================================
--- src/test/com/carrotsearch/hppc/ObjectArrayListTest.java	(revision 4037)
+++ src/test/com/carrotsearch/hppc/ObjectArrayListTest.java	(working copy)
@@ -217,7 +217,7 @@
 
     /* */
     @Test
-    public void testRemoveAll()
+    public void testRemoveAllPredicate()
     {
         list.add(newArray(list.buffer, 0, 1, 0, 1, 0));
 
@@ -239,7 +239,7 @@
 
     /* */
     @Test
-    public void testRemoveAllIn()
+    public void testRemoveAllIterable()
     {
         list.add(newArray(list.buffer, 0, 1, 2, 1, 0));
         
Index: src/java/com/carrotsearch/hppc/ObjectArrayList.java
===================================================================
--- src/java/com/carrotsearch/hppc/ObjectArrayList.java	(revision 4037)
+++ src/java/com/carrotsearch/hppc/ObjectArrayList.java	(working copy)
@@ -3,6 +3,7 @@
 import java.util.*;
 
 import com.carrotsearch.hppc.cursors.*;
+import com.carrotsearch.hppc.predicates.*;
 import com.carrotsearch.hppc.procedures.*;
 
 /**
@@ -293,17 +294,16 @@
     }
 
     /**
-     * Removes all elements that equal <code>e1</code>. This method does a single
-     * scan through the list.
+     * Removes all elements for which the predicate <code>p</code> returns <code>true</code>.
      * 
      * @return Returns the count of elements removed from the list.
      */
-    public final int removeAll(KType e1)
+    public final int removeAll(final ObjectPredicate<KType> p)
     {
         int to = 0;
         for (int from = 0; from < elementsCount; from++)
         {
-            if (Intrinsics.equals(e1, buffer[from]))
+            if (p.apply(buffer[from]))
             {
                 buffer[from] = Intrinsics.<KType>defaultKTypeValue();
                 continue;
@@ -331,10 +331,21 @@
      */
     public final int removeAll(Iterator<? extends ObjectCursor<? extends KType>> iterator)
     {
+        final KType [] current = Intrinsics.newKTypeArray(1);
+
+        final ObjectPredicate<KType> p = new ObjectPredicate<KType>()
+        {
+            public boolean apply(KType value)
+            {
+                return Intrinsics.equals(value, current[0]);
+            };
+        };
+
         int count = 0;
         while (iterator.hasNext())
         {
-            count += removeAll((KType) iterator.next().value);
+            current[0] = (KType) iterator.next().value;
+            count += removeAll(p);
         }
 
         return count;
Index: src/java/com/carrotsearch/hppc/predicates/ObjectPredicate.java
===================================================================
--- src/java/com/carrotsearch/hppc/predicates/ObjectPredicate.java	(revision 0)
+++ src/java/com/carrotsearch/hppc/predicates/ObjectPredicate.java	(revision 0)
@@ -0,0 +1,9 @@
+package com.carrotsearch.hppc.predicates;
+
+/**
+ * A predicate that applies to KType. 
+ */
+public interface ObjectPredicate<KType>
+{
+    boolean apply(KType value);
+}
\ No newline at end of file
Index: build.xml
===================================================================
--- build.xml	(revision 4037)
+++ build.xml	(working copy)
@@ -239,7 +239,7 @@
             <filtermapper id="filter.specific.@{KType}">
                 <!-- Replace template class declarations in tests and benchmarks. -->
                 <replaceregex byline="false" flags="gmi" 
-                    pattern="(?:Object)(Stack|ArrayList|Cursor|Procedure|OpenHashSet|ArrayDeque)(&lt;[^&gt;]+&gt;)?" 
+                    pattern="(?:Object)(Stack|ArrayList|Cursor|Predicate|Procedure|OpenHashSet|ArrayDeque)(&lt;[^&gt;]+&gt;)?" 
                     replace="@{UKType}\1" />
 
                 <!-- Intrinsics.equals(a, b) â†’ (a == b) -->
@@ -401,6 +401,7 @@
                 <include name="**/ObjectStack*.java" />
                 <include name="**/ObjectCursor*.java" />
                 <include name="**/ObjectProcedure*.java" />
+                <include name="**/ObjectPredicate*.java" />
                 <include name="**/ObjectOpenHashSet*.java" />
                 <include name="**/ObjectArrayDeque*.java" />
             </fileset>
