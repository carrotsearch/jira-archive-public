diff --git a/core/carrot2-source-opensearch/src/org/carrot2/source/opensearch/OpenSearchDocumentSource.java b/core/carrot2-source-opensearch/src/org/carrot2/source/opensearch/OpenSearchDocumentSource.java
index 6e15580..f724b6d 100644
--- a/core/carrot2-source-opensearch/src/org/carrot2/source/opensearch/OpenSearchDocumentSource.java
+++ b/core/carrot2-source-opensearch/src/org/carrot2/source/opensearch/OpenSearchDocumentSource.java
@@ -2,7 +2,7 @@
 /*
  * Carrot2 project.
  *
- * Copyright (C) 2002-2011, Dawid Weiss, Stanisław Osiński.
+ * Copyright (C) 2002-2010, Dawid Weiss, Stanisław Osiński.
  * All rights reserved.
  *
  * Refer to the full license file "carrot2.LICENSE"
@@ -27,6 +27,7 @@ import org.carrot2.core.attribute.Processing;
 import org.carrot2.source.MultipageSearchEngine;
 import org.carrot2.source.MultipageSearchEngineMetadata;
 import org.carrot2.source.SearchEngineResponse;
+import org.carrot2.source.opensearch.OpenSearchHttpClientFeedFetcher;
 import org.carrot2.util.StringUtils;
 import org.carrot2.util.attribute.Attribute;
 import org.carrot2.util.attribute.Bindable;
@@ -34,13 +35,13 @@ import org.carrot2.util.attribute.Input;
 import org.carrot2.util.attribute.Required;
 import org.carrot2.util.attribute.constraint.IntRange;
 import org.carrot2.util.resource.URLResourceWithParams;
+
 import org.slf4j.Logger;
 
 import com.google.common.collect.Maps;
 import com.sun.syndication.feed.synd.SyndEntry;
 import com.sun.syndication.feed.synd.SyndFeed;
 import com.sun.syndication.fetcher.FeedFetcher;
-import com.sun.syndication.fetcher.impl.HttpURLFeedFetcher;
 
 /**
  * A {@link IDocumentSource} fetching {@link Document}s (search results) from an
@@ -156,12 +157,42 @@ public class OpenSearchDocumentSource extends MultipageSearchEngine
     public String userAgent = null;
 
     /**
+     * Basic Auth Username. The username to use then connecting to a 
+     * protected feed URL. If empty or <code>null</code> value is provided,
+     * no authentication is used.
+     * 
+     * @label Basic Auth Username
+     * @level Advanced
+     * @group Service
+     */
+    @Input
+    @Init
+    @Processing
+    @Attribute
+    public String basicAuthUsername = null;
+
+    /**
+     * Basic Auth Password. The password to use then connecting to a 
+     * protected feed URL. If empty or <code>null</code> value is provided,
+     * no authentication is used.
+     * 
+     * @label Basic Auth Password
+     * @level Advanced
+     * @group Service
+     */
+    @Input
+    @Init
+    @Processing
+    @Attribute
+    public String basicAuthPassword = null;
+
+    /**
      * Search engine metadata create upon initialization.
      */
     private MultipageSearchEngineMetadata metadata;
 
     /** Fetcher for OpenSearch feed. */
-    private FeedFetcher feedFetcher;
+    private OpenSearchHttpClientFeedFetcher feedFetcher;
 
     /** searchTerms variable */
     private static final String SEARCH_TERMS_VARIABLE_NAME = "searchTerms";
@@ -213,11 +244,18 @@ public class OpenSearchDocumentSource extends MultipageSearchEngine
 
         this.metadata = new MultipageSearchEngineMetadata(resultsPerPage, maximumResults,
             hasStartPage);
-        this.feedFetcher = new HttpURLFeedFetcher();
+        this.feedFetcher = new OpenSearchHttpClientFeedFetcher();
         if (org.apache.commons.lang.StringUtils.isNotBlank(this.userAgent))
         {
             this.feedFetcher.setUserAgent(this.userAgent);
         }
+        
+        if (org.apache.commons.lang.StringUtils.isNotBlank(this.basicAuthUsername) &&
+            org.apache.commons.lang.StringUtils.isNotBlank(this.basicAuthPassword))
+        {
+        	feedFetcher.setBasicCredentials(this.basicAuthUsername, this.basicAuthPassword);
+        }
+        
     }
 
     @Override
diff --git a/core/carrot2-source-opensearch/src/org/carrot2/source/opensearch/OpenSearchHttpClientFeedFetcher.java b/core/carrot2-source-opensearch/src/org/carrot2/source/opensearch/OpenSearchHttpClientFeedFetcher.java
new file mode 100644
index 0000000..882606e
--- /dev/null
+++ b/core/carrot2-source-opensearch/src/org/carrot2/source/opensearch/OpenSearchHttpClientFeedFetcher.java
@@ -0,0 +1,337 @@
+
+/*
+ * Carrot2 project.
+ *
+ * Copyright (C) 2002-2011, Dawid Weiss, Stanisław Osiński.
+ * All rights reserved.
+ * 
+ * OpenSearchHttpClientFeedFetcher - A feedfetcher using the
+ * Apache HttpComponents 4.x API and capable of basic authentication
+ * Vittal Aithal - Cognidox Ltd <opensource@cognidox.com>
+ *
+ * Refer to the full license file "carrot2.LICENSE"
+ * in the root folder of the repository checkout or at:
+ * http://www.carrot2.org/carrot2.LICENSE
+ */
+
+package org.carrot2.source.opensearch;
+
+import com.sun.syndication.feed.synd.SyndFeed;
+import com.sun.syndication.fetcher.FetcherEvent;
+import com.sun.syndication.fetcher.FetcherException;
+import com.sun.syndication.fetcher.impl.AbstractFeedFetcher;
+import com.sun.syndication.fetcher.impl.FeedFetcherCache;
+import com.sun.syndication.fetcher.impl.SyndFeedInfo;
+import com.sun.syndication.io.FeedException;
+import com.sun.syndication.io.SyndFeedInput;
+import com.sun.syndication.io.XmlReader;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpHost;
+import org.apache.http.HttpResponse;
+import org.apache.http.auth.AuthScope;
+import org.apache.http.auth.Credentials;
+import org.apache.http.auth.UsernamePasswordCredentials;
+import org.apache.http.client.AuthCache;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.protocol.ClientContext;
+import org.apache.http.impl.auth.BasicScheme;
+import org.apache.http.impl.client.BasicAuthCache;
+import org.apache.http.impl.client.ContentEncodingHttpClient;
+import org.apache.http.params.HttpConnectionParams;
+import org.apache.http.params.HttpProtocolParams;
+import org.apache.http.protocol.BasicHttpContext;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.IllegalStateException;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+
+public class OpenSearchHttpClientFeedFetcher extends AbstractFeedFetcher
+{
+
+    private FeedFetcherCache feedInfoCache;
+    private String userName;
+    private String password;
+
+    public OpenSearchHttpClientFeedFetcher()
+    {
+        super();
+    }
+
+    /**
+     * @param cache
+     */
+    public OpenSearchHttpClientFeedFetcher(FeedFetcherCache cache)
+    {
+        this();
+        setFeedInfoCache(cache);
+    }
+
+    /**
+     * @return the feedInfoCache.
+     */
+    public synchronized FeedFetcherCache getFeedInfoCache()
+    {
+        return feedInfoCache;
+    }
+
+    /**
+     * @param feedInfoCache the feedInfoCache to set
+     */
+    public synchronized void setFeedInfoCache(FeedFetcherCache feedInfoCache)
+    {
+        this.feedInfoCache = feedInfoCache;
+    }
+
+
+    /**
+     * @see com.sun.syndication.fetcher.FeedFetcher#retrieveFeed(java.net.URL)
+     */
+    public SyndFeed retrieveFeed(URL feedUrl) throws IllegalArgumentException, IOException, FeedException, FetcherException
+    {
+        return retrieveFeed(feedUrl, 0);
+    }
+
+    /**
+     * @see com.sun.syndication.fetcher.FeedFetcher#retrieveFeed(java.net.URL)
+     */
+    public SyndFeed retrieveFeed(URL feedUrl, int timeout) throws IllegalArgumentException, IOException, FeedException, FetcherException 
+    {
+        if (feedUrl == null) 
+        {
+            throw new IllegalArgumentException("null is not a valid URL");
+        }
+        
+        // Create a client that can accept gzip encoded responses
+        ContentEncodingHttpClient client = new ContentEncodingHttpClient();
+        BasicHttpContext localcontext = null;
+        if (timeout != 0) 
+        {
+            HttpConnectionParams.setConnectionTimeout(client.getParams(), timeout);
+            HttpConnectionParams.setSoTimeout(client.getParams(), timeout);
+        }
+        
+        // If the username and password have been set, set up the authentication
+        // details for this client
+        if (this.userName != null && this.password != null)
+        {
+        	client.getCredentialsProvider().setCredentials(
+        			AuthScope.ANY, new UsernamePasswordCredentials(this.userName,this.password));
+        	
+        	// Set up the pre-emptive authentication - without this, two requests
+        	// are made for the feed - one which will return a 401 and one which succeeds
+        	HttpHost targetHost = new HttpHost(feedUrl.getHost(), feedUrl.getPort(), feedUrl.getProtocol());
+        	
+        	// Create AuthCache instance
+            AuthCache authCache = new BasicAuthCache();
+            // Generate BASIC scheme object and add it to the local
+            // auth cache
+            BasicScheme basicAuth = new BasicScheme();
+            authCache.put(targetHost, basicAuth);
+
+            // Add AuthCache to the execution context
+            localcontext = new BasicHttpContext();
+            localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);
+        }
+
+        String urlStr = feedUrl.toString();
+        FeedFetcherCache cache = getFeedInfoCache();
+        if (cache != null) 
+        {
+            // retrieve feed
+        	HttpGet method = new HttpGet(urlStr);
+        	HttpProtocolParams.setUserAgent(client.getParams(), getUserAgent());
+            try 
+            {
+                if (isUsingDeltaEncoding()) 
+                {
+                    method.setHeader("A-IM", "feed");
+                }
+
+                // Get the feed info from the cache
+                // Note that syndFeedInfo will be null if it is not in the cache
+                SyndFeedInfo syndFeedInfo = cache.getFeedInfo(feedUrl);
+                if (syndFeedInfo != null) 
+                {
+                    method.setHeader("If-None-Match", syndFeedInfo.getETag());
+
+                    if (syndFeedInfo.getLastModified() instanceof String) 
+                    {
+                        method.setHeader("If-Modified-Since", (String)syndFeedInfo.getLastModified());
+                    }
+                }
+
+                HttpResponse response = client.execute(method, localcontext);
+                int statusCode = response.getStatusLine().getStatusCode();
+                fireEvent(FetcherEvent.EVENT_TYPE_FEED_POLLED, urlStr);
+                handleErrorCodes(statusCode);
+
+                SyndFeed feed = getFeed(syndFeedInfo, urlStr, response, statusCode);
+
+                syndFeedInfo = buildSyndFeedInfo(feedUrl, urlStr, response, feed, statusCode);
+
+                cache.setFeedInfo(new URL(urlStr), syndFeedInfo);
+
+                // the feed may have been modified to pick up cached values
+                // (eg - for delta encoding)
+                feed = syndFeedInfo.getSyndFeed();
+
+                return feed;
+            }
+            finally 
+            {
+                client.getConnectionManager().shutdown();
+            }
+
+        }
+        else
+        {	
+            // Cache is not in use
+            HttpGet method = new HttpGet(urlStr);
+            HttpProtocolParams.setUserAgent(client.getParams(), getUserAgent());
+            try 
+            {
+                HttpResponse response = client.execute(method, localcontext);
+                int statusCode = response.getStatusLine().getStatusCode();
+                fireEvent(FetcherEvent.EVENT_TYPE_FEED_POLLED, urlStr);
+                handleErrorCodes(statusCode);
+
+                return getFeed(null, urlStr, response, statusCode);
+            }
+            finally
+            {
+            	client.getConnectionManager().shutdown();
+            }
+        }
+    }
+
+
+    /**
+     * @param feedUrl
+     * @param urlStr
+     * @param response
+     * @param feed
+     * @return
+     * @throws MalformedURLException
+     */
+    private SyndFeedInfo buildSyndFeedInfo(URL feedUrl, String urlStr, HttpResponse response, SyndFeed feed, int statusCode) throws MalformedURLException 
+    {
+        SyndFeedInfo syndFeedInfo;
+        syndFeedInfo = new SyndFeedInfo();
+
+        // this may be different to feedURL because of 3XX redirects
+        syndFeedInfo.setUrl(new URL(urlStr));
+        syndFeedInfo.setId(feedUrl.toString());
+
+        Header imHeader = response.getFirstHeader("IM");
+        if (imHeader != null && imHeader.getValue().indexOf("feed") >= 0 && isUsingDeltaEncoding()) 
+        {
+            FeedFetcherCache cache = getFeedInfoCache();
+            if (cache != null && statusCode == 226) {
+                // client is setup to use http delta encoding and the server supports it and has returned a delta encoded response
+                // This response only includes new items
+                SyndFeedInfo cachedInfo = cache.getFeedInfo(feedUrl);
+                if (cachedInfo != null) 
+                {
+                    SyndFeed cachedFeed = cachedInfo.getSyndFeed();
+
+                    // set the new feed to be the orginal feed plus the new items
+                    feed = combineFeeds(cachedFeed, feed);
+                }
+            }
+        }
+
+        Header lastModifiedHeader = response.getFirstHeader("Last-Modified");
+        if (lastModifiedHeader != null) 
+        {
+            syndFeedInfo.setLastModified(lastModifiedHeader.getValue());
+        }
+
+        Header eTagHeader = response.getFirstHeader("ETag");
+        if (eTagHeader != null) 
+        {
+            syndFeedInfo.setETag(eTagHeader.getValue());
+        }
+
+        syndFeedInfo.setSyndFeed(feed);
+
+        return syndFeedInfo;
+    }
+
+    /**
+     * @param urlStr
+     * @param response
+     * @return
+     * @throws IOException
+     * @throws IllegalStateException
+     * @throws FetcherException
+     * @throws FeedException
+     */
+    private static SyndFeed retrieveFeed(String urlStr, HttpResponse response) throws IOException, IllegalStateException, FetcherException, FeedException 
+    {
+
+        InputStream stream = response.getEntity().getContent();
+        try 
+        {
+            XmlReader reader = null;
+            if (response.getFirstHeader("Content-Type") != null)
+            {
+                reader = new XmlReader(stream, response.getFirstHeader("Content-Type").getValue(), true);
+            }
+            else
+            {
+                reader = new XmlReader(stream, true);
+            }
+            return new SyndFeedInput().build(reader);
+        }
+        finally
+        {
+            if (stream != null) {
+                stream.close();
+            }
+        }
+    }
+
+    /**
+     * @param syndFeedInfo
+     * @param urlStr
+     * @param response
+     * @param statusCode
+     * @return
+     * @throws IOException
+     * @throws FetcherException
+     * @throws FeedException
+     */
+    private SyndFeed getFeed(SyndFeedInfo syndFeedInfo, String urlStr, HttpResponse response, int statusCode) throws IOException, FetcherException, FeedException 
+    {
+
+        if (statusCode == HttpURLConnection.HTTP_NOT_MODIFIED && syndFeedInfo != null)
+        {
+            fireEvent(FetcherEvent.EVENT_TYPE_FEED_UNCHANGED, urlStr);
+            return syndFeedInfo.getSyndFeed();
+        }
+
+        SyndFeed feed = retrieveFeed(urlStr, response);
+        fireEvent(FetcherEvent.EVENT_TYPE_FEED_RETRIEVED, urlStr, feed);
+        return feed;
+    }
+
+    /**
+     * Set the username and password to be used for HTTP basic authentication
+     * 
+     * @param userName
+     * @param password
+     */
+    public void setBasicCredentials(String userName, String password)
+    {
+    	this.userName = userName;
+    	this.password = password;
+    }
+
+
+}
+
